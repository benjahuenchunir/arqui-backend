name: Build and Deploy

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - 'generar_boleta/**'
      - '.github/workflows/test_and_deploy_serverless.yaml'

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build, tag, and push api
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: v0y9v2i3
          REPOSITORY: api
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG -f ./api/Dockerfile .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG

      - name: Build, tag, and push jobs-master
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: v0y9v2i3
          REPOSITORY: jobs-master
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG -f ./jobs_master/Dockerfile .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
      
      - name: Build, tag, and push listener
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: v0y9v2i3
          REPOSITORY: listener
          IMAGE_TAG: latest
        run: |
          cd listener
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
      
      - name: Build, tag, and push publisher
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: v0y9v2i3
          REPOSITORY: publisher
          IMAGE_TAG: latest
        run: |
          cd publisher
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
      
  
  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public
          mask-password: "true"

      - name: Zip artifact to deploy
        run: |
          zip -r deploy.zip scripts/ appspec.yml docker-compose.production.yml
      
      - name: Copy Zip to S3
        run: |
          aws s3 cp deploy.zip s3://iic2173-back/deploy.zip
      
      - name: Create CodeDeploy Deployment
        id: create-deployment-trigger
        run: |
          deploymentId=$(aws deploy create-deployment --application-name iic2173-app \
          --deployment-group-name group-iic2173 --region us-east-1 \
          --s3-location bucket=iic2173-back,key=deploy.zip,bundleType=zip \
          --description "Automatic deployment from githubactions commit ${{ github.sha }}" \
          --file-exists-behavior OVERWRITE | jq -r '.deploymentId')
          echo "deploymentId=$deploymentId" >> $GITHUB_OUTPUT
        
      - name: Debug Deployment ID
        run: |
          echo "Deployment ID: ${{ steps.create-deployment-trigger.outputs.deploymentId }}"
        
      - name: Wait for deployment to finish
        run: |
            aws deploy wait deployment-successful --deployment-id ${{ steps.create-deployment-trigger.outputs.deploymentId }} --region us-east-1
        