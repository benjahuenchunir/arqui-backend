name: Build and Deploy

on:
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'

permissions:
  id-token: write
  contents: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: build_test_env

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2
    
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Build Docker images
      run: docker-compose -f compose.dev.yaml build
    
    - name: Run Docker containers
      run: docker-compose -f compose.dev.yaml up -d
      env:
        POSTGRES_USER: ${{ vars.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
        POSTGRES_DB_NAME: ${{ vars.POSTGRES_DB_NAME }}
        POST_TOKEN: ${{ vars.POST_TOKEN }}
        PATH_FIXTURES: ${{ vars.PATH_FIXTURES }}
        PATH_REQUESTS: ${{ vars.PATH_REQUESTS }}
        MQTT_HOST: ${{ secrets.MQTT_HOST }}
        MQTT_PORT: ${{ secrets.MQTT_PORT }}
        MQTT_USER: ${{ secrets.MQTT_USER }}
        MQTT_PASSWORD: ${{ secrets.MQTT_PASSWORD }}
        GROUP_ID: ${{ vars.GROUP_ID }}
        TRANSBANK_REDIRECT_URL: ${{ vars.TRANSBANK_REDIRECT_URL }}
        SESSION_ID: ${{ vars.SESSION_ID }}
        ENV: production

    - name: Install Python
      run: sudo apt-get install -y python3 python3-pip

    - name: Install Requests library
      run: pip3 install requests
    
    - name: Wait for containers to start
      run: sleep 20

    - name: Run API tests
      run: python3 test_services.py
      env:
        PATH_FIXTURES: ${{ vars.PATH_FIXTURES }}
        ENV: production

    - name: Check Listener Logs
      run: docker-compose logs arquisis-listener | grep "Connected to Broker with result code" || exit 1

    - name: Stop containers
      run: docker-compose down
  
  build-and-push:
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build, tag, and push api
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: v0y9v2i3
          REPOSITORY: arquisis-api
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG -f ./api/Dockerfile .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG

      - name: Build, tag, and push jobs-master
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: v0y9v2i3
          REPOSITORY: jobs-master
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG -f ./jobs_master/Dockerfile .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
      
      - name: Build, tag, and push listener
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: v0y9v2i3
          REPOSITORY: listener
          IMAGE_TAG: latest
        run: |
          cd listener
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
      
      - name: Build, tag, and push publisher
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: v0y9v2i3
          REPOSITORY: publisher
          IMAGE_TAG: latest
        run: |
          cd publisher
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
      
  
  deploy-to-ec2:
    runs-on: ubuntu-latest
    if: ${{always()}}
    needs: [build-and-push]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID0}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY0}}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public
          mask-password: "true"

      - name: Zip artifact to deploy
        run: |
          zip -r deploy.zip scripts/ appspec.yml docker-compose.production.yml
      - name: Copy Zip to S3
        run: |
          aws s3 cp deploy.zip s3://iic2173-back/deploy.zip
      
      - name: Create CodeDeploy Deployment
        id: create-deployment-trigger
        run: |
          deploymentId=$(aws deploy create-deployment --application-name \
          iic2173-app --deployment-group-name group-iic2173 --region us-east-1 \
          --s3-location bucket=iic2173-back,key=deploy.zip,bundleType=zip \
          --description --file-exists-behavior OVERWRITE "Automatic deployment from githubactions commit ${{github.sha}}" | jq -r '.deploymentId')
          echo "DeploymentId=$deploymentId" >> $GITHUB_OUTPUT
    
      - name: Wait for deployment to finish
        run: |
          aws deploy wait deployment-successful --deployment-id ${{ steps.create-deployment-trigger.outputs.deploymentId }} --region us-east-1